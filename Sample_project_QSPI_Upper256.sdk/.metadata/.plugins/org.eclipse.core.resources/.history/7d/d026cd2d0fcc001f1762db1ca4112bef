#if(1)  //----------------------   S: Header Define What Is This File?
#endif  //----------------------   E: Header Define What Is This File?

#if(1)  //----------------------   S: Header Include
#include "Zynq7020.h"
#endif  //----------------------   E: Header Incloud

#if(1)  //----------------------   S: General
    void Correct_Serial_Number(void){
        ReadMyCfg.Serial=Correct_Serial_Number_Specific(ReadMyCfg.Serial);
    }
    uint32_t Correct_Serial_Number_Specific(int serial_Fuck){
	    if(serial_Fuck<1000000 && serial_Fuck>0)
	    	serial_Fuck+=Const_For_Vivado;
	    return serial_Fuck;
    }
    void Zynq7020_Init(void){

        Glb_common_PS0_PS1=(common_PS0_PS1*)0xFFFF0000;

        TcpFastTmrFlag=0;
        TcpSlowTmrFlag=0;
    }
    void Detect_Main_Version(void){
        Set_Main_IP(Version_SV0, 1000);
        usleep(1000);
        Main_IP_Shift_Register_Vivado_Detect_Ver = AssignFromSV_Single_data(W_I_Rec_165_VP_V1);
        Main_Version = ((Main_IP_Shift_Register_Vivado_Detect_Ver>>8) & 0xff);
        if(Main_Version==255 || Main_Version==0){
            Main_Version=1;
        }
        if(Main_Version==6){
            Main_Version=7;
        }
        Set_Main_IP(Version_SV0, Main_Version);
        if(Flag_Send_and_Recive_Serial!=1) {xil_printf("Fuck2: Main Version:%d\r\n", Main_Version); Delay_Xil_Printf;}
    }
    int8_t IsGreaterOrEqual(double x1, double x2) {
        return x1 - x2 > -PercisionCompare;
    }
    int8_t IsLessOrEqual(double x1, double x2) {
        return x1 - x2 < PercisionCompare;
    }
    int8_t IsEqual(double x1, double x2) {
        return (x1 - x2 > -PercisionCompare) && (x1 - x2 < PercisionCompare);
    }
    int32_t Calculate_Calib(double x1, double x2, double y1, double y2, double x){
        if(x2==x1)
            return 0;
        return y1+(y2-y1)*(x-x1)/(x2-x1);
    }
#endif  //----------------------   E: General
#if(1)  //----------------------   S: Interrupt
    void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority){
            if (priority >=3){
                prio = (priority+1)*8;
            }else{
                prio = (priority)*8;
            }
            switch (IRQn){
                case TIMER0_IRQn:
                    XScuGic_SetPriorityTriggerType(&IntcInstancePtr, XPAR_FABRIC_TESTER_HP_0_INTERRUPT_12_5us_VEC_ID, prio, 0x3);
                    break;
                case TIMER2_IRQn:
                    XScuGic_SetPriorityTriggerType(&IntcInstancePtr,XPAR_XTTCPS_2_INTR,prio,1);
                    break;
                case TIMER3_IRQn:
                    break;
                case GPIO_IRQn:
                    break;
                case ENET_IRQn:
                    break;
                case UART0_IRQn:
                    XScuGic_SetPriorityTriggerType(&IntcInstancePtr, XPS_UART1_INT_ID, prio, 0x3);
                    break;
                case UART2_IRQn:
                    XScuGic_SetPriorityTriggerType(&IntcInstancePtr, XPS_UART0_INT_ID, prio, 0x3);
                    break;
                case MCI_IRQn:
                    break;
                case DMA_IRQn:
                    break;
                case SysTick_IRQn:
                    break;
                case I2C1_IRQn:
                    break;
                default:
                    break;
            }
    }
    void NVIC_SystemReset(void){
        if(Flag_Send_and_Recive_Serial!=1) {xil_printf("@@@@@@@@@ Zynq System Reset_1\n"); Delay_Xil_Printf;}
        usleep(10000);
        Xil_Out32(XPAR_XSLCR_0_BASEADDR + SLCR_UNLOCK_ADDRESS,SLCR_UNLOCK_KEY);
        Xil_Out32(XPAR_XSLCR_0_BASEADDR + SLCR_SYSTEM_RESET,0x01);
    }
    void NVIC_Init(){
            IntcConfig = XScuGic_LookupConfig(XPAR_SCUGIC_SINGLE_DEVICE_ID);
            XScuGic_CfgInitialize(&IntcInstancePtr, IntcConfig,    IntcConfig->CpuBaseAddress);
            XScuGic_CPUWriteReg(&IntcInstancePtr, XSCUGIC_BIN_PT_OFFSET, 0x03);
            Xil_ExceptionInit();
            Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_IRQ_INT, (Xil_ExceptionHandler) XScuGic_DeviceInterruptHandler, (void *)XPAR_SCUGIC_SINGLE_DEVICE_ID);
//            Xil_ExceptionEnable();
    }
    void NVIC_EnableIRQ(IRQn_Type IRQn){
        if(IRQn == TIMER0_IRQn){
        #if(This_Is_Core1)
            int INT_61_62_63_From_IpCore=Xil_In32(0xF8F0183C);
            Xil_Out32(0xF8F0183C,(uint32_t)((INT_61_62_63_From_IpCore&0xFCFCFCFF)|0x2020200));
            XScuGic_Connect(&IntcInstancePtr, XPAR_FABRIC_TESTER_HP_0_INTERRUPT_12_5us_VEC_ID, (Xil_ExceptionHandler)TIMER0_IRQHandler, (void *)0);
            XScuGic_Enable(&IntcInstancePtr, XPAR_FABRIC_TESTER_HP_0_INTERRUPT_12_5us_VEC_ID);
            Xil_ExceptionEnable();
        }
        else if(IRQn == TIMER2_IRQn){
            int INT_44_TTC0=Xil_In32(0xF8F0182C);
            Xil_Out32(0xF8F0182C,(uint32_t)((INT_44_TTC0&0xFFFFFFFC)|0x2));
            XScuGic_Connect(&IntcInstancePtr, XPAR_XTTCPS_2_INTR, (Xil_ExceptionHandler)TIMER2_IRQHandler, (void *)TTC2);
            XScuGic_Enable(&IntcInstancePtr, XPAR_XTTCPS_2_INTR);
            XTtcPs_EnableInterrupts(TTC2, XTTCPS_IXR_INTERVAL_MASK);
        }
        else if(IRQn == UART2_IRQn){
            XScuGic_Connect(&IntcInstancePtr, XPS_UART0_INT_ID, (Xil_ExceptionHandler) XUartPs_InterruptHandler, (void *)&Uart_PS);
            int INT_59_UART0=Xil_In32(0xF8F01838);
            Xil_Out32(0xF8F01838,(uint32_t)((INT_59_UART0&0xFCFFFFFF)|0x2000000));

            XScuGic_Enable(&IntcInstancePtr, XPS_UART0_INT_ID);
            Xil_ExceptionEnable();

            XUartPs_SetHandler(&Uart_PS, (XUartPs_Handler)UART2_IRQHandler, &Uart_PS);

            IntrMask =
                XUARTPS_IXR_TOUT | XUARTPS_IXR_PARITY | XUARTPS_IXR_FRAMING |
                XUARTPS_IXR_OVER | XUARTPS_IXR_TXEMPTY | XUARTPS_IXR_RXFULL |
                XUARTPS_IXR_RXOVR;

            XUartPs_SetInterruptMask(&Uart_PS, IntrMask);
            XUartPs_SetBaudRate(&Uart_PS, 9600);


            XUartPs_SetOperMode(&Uart_PS, XUARTPS_OPER_MODE_NORMAL);


            XUartPs_SetRecvTimeout(&Uart_PS, 8);

            XUartPs_Recv(&Uart_PS, &UART_RecvBuffer, 1);

        #endif
        }
        else if(IRQn == UART0_IRQn){
            XScuGic_Connect(&IntcInstancePtr, XPS_UART1_INT_ID, (Xil_ExceptionHandler) XUartPs_InterruptHandler, (void *)&Uart_PS0);
            int INT_82_UART1=Xil_In32(0xF8F01850);
            Xil_Out32(0xF8F01850,(uint32_t)((INT_82_UART1&0xFFFCFFFF)|(This_Is_Core1?0x20000:0x10000)));
            XScuGic_Enable(&IntcInstancePtr, XPS_UART1_INT_ID);
            Xil_ExceptionEnable();
            XUartPs_SetHandler(&Uart_PS0, (XUartPs_Handler)UART1_IRQHandler, &Uart_PS0);
            IntrMask = XUARTPS_IXR_TOUT | XUARTPS_IXR_PARITY | XUARTPS_IXR_FRAMING | XUARTPS_IXR_OVER | XUARTPS_IXR_TXEMPTY | XUARTPS_IXR_RXFULL | XUARTPS_IXR_RXOVR;
            XUartPs_SetInterruptMask(&Uart_PS0, IntrMask);
            XUartPs_SetFifoThreshold(&Uart_PS0, 2);
            XUartPs_SetOperMode(&Uart_PS0, XUARTPS_OPER_MODE_NORMAL);
            XUartPs_SetRecvTimeout(&Uart_PS0, 8);
            XUartPs_Recv(&Uart_PS0, &UART_RecvBuffer, 1);
        }
    }
#endif  //----------------------   E: Interrupt
#if(1)  //----------------------   S: Flash
    void FlashErase(XQspiPs *QspiPtr, u32 sector){
        u8 WriteEnableCmd = { WRITE_ENABLE_CMD };
        u8 ReadStatusCmd[] = { READ_STATUS_CMD, 0 };  /* must send 2 bytes */
        u8 FlashStatus[2];

        u32 Address = sector * SECTOR_SIZE;

        XQspiPs_PolledTransfer(&QspiInstance, &WriteEnableCmd, NULL, sizeof(WriteEnableCmd));


        if(FLASH_TYPE == SPANTION_TYPE)
            WriteBuffer[COMMAND_OFFSET]   = 0x17;
        else
            WriteBuffer[COMMAND_OFFSET]   = 0xC5;
        WriteBuffer[ADDRESS_1_OFFSET] = (u8)(Address >> 24);

        XQspiPs_PolledTransfer(&QspiInstance, WriteBuffer, NULL,2);
        while (1) {
            XQspiPs_PolledTransfer(&QspiInstance, ReadStatusCmd, FlashStatus,sizeof(ReadStatusCmd));
            if ((FlashStatus[1] & 0x01) == 0) {
                break;
            }
        }

        XQspiPs_PolledTransfer(QspiPtr, &WriteEnableCmd, NULL, sizeof(WriteEnableCmd));

        WriteBuffer[COMMAND_OFFSET]   = SEC_ERASE_CMD;
        WriteBuffer[ADDRESS_1_OFFSET] = (u8)(Address >> 16);
        WriteBuffer[ADDRESS_2_OFFSET] = (u8)(Address >> 8);
        WriteBuffer[ADDRESS_3_OFFSET] = (u8)(Address & 0xFF);
        XQspiPs_PolledTransfer(QspiPtr, WriteBuffer, NULL, SEC_ERASE_SIZE);
        while (1) {
            XQspiPs_PolledTransfer(QspiPtr, ReadStatusCmd, FlashStatus, sizeof(ReadStatusCmd));
            if ((FlashStatus[1] & 0x01) == 0) {
                break;
            }
        }
    }
    int FlashReadID(void)
    {
        int Status;
        WriteBuffer[COMMAND_OFFSET]   = READ_ID;
        WriteBuffer[ADDRESS_1_OFFSET] = 0x23;
        WriteBuffer[ADDRESS_2_OFFSET] = 0x08;
        WriteBuffer[ADDRESS_3_OFFSET] = 0x09;

        Status = XQspiPs_PolledTransfer(&QspiInstance, WriteBuffer, ReadBuffer, RD_ID_SIZE);
        return Status+(ReadBuffer[1]<<8)+ (ReadBuffer[2]<<16)+(ReadBuffer[3]<<24);
    }
    void FlashQuadEnable(XQspiPs *QspiPtr)
    {
        u8 WriteEnableCmd = {WRITE_ENABLE_CMD};
        u8 ReadStatusCmd[] = {READ_STATUS_CMD, 0};
        u8 QuadEnableCmd[] = {WRITE_STATUS_CMD, 0, 0};
        u8 FlashStatus[2];

        if (FLASH_TYPE == SPANTION_TYPE || FLASH_TYPE == WINBOND_TYPE || FLASH_TYPE == MICRON_TYPE)  {
            XQspiPs_PolledTransfer(QspiPtr, ReadStatusCmd, FlashStatus, sizeof(ReadStatusCmd));
            QuadEnableCmd[1] = FlashStatus[1];
            QuadEnableCmd[2] = 0x02;
            XQspiPs_PolledTransfer(QspiPtr, &WriteEnableCmd, NULL, sizeof(WriteEnableCmd));
            XQspiPs_PolledTransfer(QspiPtr, QuadEnableCmd, NULL, sizeof(QuadEnableCmd));
        }
        else
        {
            while(1)
                if(Flag_Send_and_Recive_Serial!=1) {xil_printf("!!! FlashQuadEnable: Unsupported Flash Type !!!\r\n"); Delay_Xil_Printf;}
        }

    }
    void EEPROM1_Flash0_Read(uint16_t page_number, uint16_t sector_number, void* data, EEPROM_Mode_Type mode, uint32_t count, uint8_t MMC_1_Flash_0){
        uint16_t start_data=0;
        switch (mode){
            case MODE_8_BIT: break;
            case MODE_16_BIT: count=2*count; break;
            case MODE_32_BIT: count=4*count; break;
            case MODE_64_BIT: count=8*count; break;
        }

        if(MMC_1_Flash_0==1){
            int i;
            u8 dataRow[512]={0};
            read_from_MMC(dataRow, sector_number, 1);
            for(i=0; i<count; i++)
                *(((u8 *)data)+i)=dataRow[i];
        }
        else if(MMC_1_Flash_0==0){
            u8 WriteEnableCmd = { WRITE_ENABLE_CMD };
            u8 ReadStatusCmd[] = { READ_STATUS_CMD, 0 };
            u8 FlashStatus[2];

            //-----S: More Than 256
            if(page_number==1000){
                page_number=0;
                start_data=64*(sector_number % 4);
                sector_number=237+sector_number/4;
            }
            //-----E: More Than 256

            u32 Address = sector_number*SECTOR_SIZE + page_number * PAGE_SIZE;

            XQspiPs_PolledTransfer(&QspiInstance, &WriteEnableCmd, NULL, sizeof(WriteEnableCmd));

            if(FLASH_TYPE == SPANTION_TYPE)
                WriteBuffer[COMMAND_OFFSET]   = 0x17;
            else
                WriteBuffer[COMMAND_OFFSET]   = 0xC5;


            WriteBuffer[ADDRESS_1_OFFSET] = (u8)(Address >> 24);

            XQspiPs_PolledTransfer(&QspiInstance, WriteBuffer, NULL,2);
            while (1) {
                XQspiPs_PolledTransfer(&QspiInstance, ReadStatusCmd, FlashStatus,sizeof(ReadStatusCmd));
                if ((FlashStatus[1] & 0x01) == 0) {
                    break;
                }
            }

            WriteBuffer[COMMAND_OFFSET]   = READ_CMD;
            WriteBuffer[ADDRESS_1_OFFSET] = (u8)((Address & 0xFF0000) >> 16);
            WriteBuffer[ADDRESS_2_OFFSET] = (u8)((Address & 0xFF00) >> 8);
            WriteBuffer[ADDRESS_3_OFFSET] = (u8)(Address & 0xFF);
            XQspiPs_PolledTransfer(&QspiInstance, WriteBuffer, ReadBuffer, count + start_data + DATA_OFFSET);
            for(int i=start_data; i<count+start_data; i++){
                ((u8 *)data)[i-start_data]=ReadBuffer[i + DATA_OFFSET];
            }
        }
    }
    void Flash_Erase(uint16_t sector_address){
        FlashErase(&QspiInstance, sector_address);
    }
    void EEPROM1_Flash0_Write(uint16_t page_number, uint16_t sector_number, void* data_Write, EEPROM_Mode_Type mode, uint32_t count){
        int i;

        switch (mode){
            case MODE_8_BIT: break;
            case MODE_16_BIT: count=2*count; break;
            case MODE_32_BIT: count=4*count; break;
            case MODE_64_BIT: count=8*count; break;
        }

        if(page_number==1000){
            u8 dataRow[512] = {0};
            for(i=0; i<count; i++)
                dataRow[i]=*(((u8 *)data_Write)+i);
            Write_to_MMC(dataRow, sector_number, 1);
        }

        u8 data_256[256]={0};
        u8 Use_MainData=1;
        u8 WriteEnableCmd = { WRITE_ENABLE_CMD };
        u8 ReadStatusCmd[] = { READ_STATUS_CMD, 0 };
        u8 FlashStatus[2];

        //-----S: More Than 256
        if(page_number==1000){
            uint32_t start_data=0, IsEqual=1;
            EEPROM1_Flash0_Read(0, 237+sector_number/4, data_256, MODE_8_BIT, 256, 0);
            start_data=64*(sector_number % 4);

            for(i=0; i<count; i++){
                if(data_256[i+start_data]!=*(((u8 *)data_Write)+i)){
                    IsEqual=0;
                    data_256[i+start_data]=*(((u8 *)data_Write)+i);
                }
            }
            if(IsEqual==1){
                return;
            }
            page_number=0;
            count=256;
            sector_number=237+sector_number/4;
            Flash_Erase(sector_number);
            Use_MainData=0;
        }
        //-----E: More Than 256

        u32 Address = sector_number*SECTOR_SIZE + page_number * PAGE_SIZE;

        XQspiPs_PolledTransfer(&QspiInstance, &WriteEnableCmd, NULL, sizeof(WriteEnableCmd));

        if(FLASH_TYPE == SPANTION_TYPE)
            WriteBuffer[COMMAND_OFFSET]   = 0x17;
        else
            WriteBuffer[COMMAND_OFFSET]   = 0xC5;
        WriteBuffer[ADDRESS_1_OFFSET] = (u8)(Address >> 24);

        XQspiPs_PolledTransfer(&QspiInstance, WriteBuffer, NULL,2);
        while (1) {
            XQspiPs_PolledTransfer(&QspiInstance, ReadStatusCmd, FlashStatus,sizeof(ReadStatusCmd));
            if ((FlashStatus[1] & 0x01) == 0) {
                break;
            }
        }

        XQspiPs_PolledTransfer(&QspiInstance, &WriteEnableCmd, NULL, sizeof(WriteEnableCmd));
        WriteBuffer[COMMAND_OFFSET]   = WRITE_CMD;
        WriteBuffer[ADDRESS_1_OFFSET] = (u8)((Address & 0xFF0000) >> 16);
        WriteBuffer[ADDRESS_2_OFFSET] = (u8)((Address & 0xFF00) >> 8);
        WriteBuffer[ADDRESS_3_OFFSET] = (u8)(Address & 0xFF);
        for(int i=0; i<count; i++){
            if(Use_MainData==1)
                WriteBuffer[i+DATA_OFFSET]=((u8 *)data_Write)[i];
            else
                WriteBuffer[i+DATA_OFFSET]=((u8 *)data_256)[i];
        }
        XQspiPs_PolledTransfer(&QspiInstance, WriteBuffer, NULL, count + DATA_OFFSET);
        while (1) {
            XQspiPs_PolledTransfer(&QspiInstance, ReadStatusCmd, FlashStatus,sizeof(ReadStatusCmd));
            if ((FlashStatus[1] & 0x01) == 0) {
                break;
            }
        }
    }
    void EEPROM_Init(void){
        Onboard_eMMC_Init();
    }
    void Flash_Init(void){
        XQspiPs_Config *QspiConfig;
        QspiConfig = XQspiPs_LookupConfig(XPAR_XQSPIPS_0_DEVICE_ID);
        XQspiPs_CfgInitialize(&QspiInstance, QspiConfig, QspiConfig->BaseAddress);
        XQspiPs_SetOptions(&QspiInstance, XQSPIPS_MANUAL_START_OPTION | XQSPIPS_FORCE_SSELECT_OPTION | XQSPIPS_HOLD_B_DRIVE_OPTION);
        XQspiPs_SetClkPrescaler(&QspiInstance, XQSPIPS_CLK_PRESCALE_8);
        XQspiPs_SetSlaveSelect(&QspiInstance);
        FlashIdNum = FlashReadID();
        FLASH_TYPE = (u8)(FlashIdNum >> 8);
        FlashQuadEnable(&QspiInstance);
    }
    void Init_MMC_Flash_Check_Validity_If_First_Write_To_Flash(void){
        MMC_Flash_FlashOk1_FlashNotOk0=0;
        MMC_Flash_MMCOk1_MMChNotOk0=0;
        MMC_Flash_CompareOk1_CompareNotOk0=0;
        Adade_Khas_25_42_211_18[0]=0; Adade_Khas_25_42_211_18[1]=0; Adade_Khas_25_42_211_18[2]=0; Adade_Khas_25_42_211_18[3]=0;

        EEPROM_Init();

        EEPROMReadConfig();
        ReadMyCfg_Compare=ReadMyCfg;

        Flash_Init();

        uint32_t data_read_SSBL_Version[PAGE_SIZE/4];
        EEPROM1_Flash0_Read(LAST_SSBL_PAGE,LAST_SSBL_SECTOR_NUM, data_read_SSBL_Version,MODE_32_BIT,PAGE_SIZE/4, 0);
        for(int i=0; i<PAGE_NUM_IN_SECTOR/4; i++)
        {
            // evrytime we change SSBL Version we have to increase the maximum value here. base on C# SSBL_Version.
            if(data_read_SSBL_Version[i] >= 0x06 || data_read_SSBL_Version[i] <= 0x0B )
            {
                New_SSBL = data_read_SSBL_Version[i];
                break;
            }
            else
            {
                New_SSBL = 0;
                break;
            }
        }
        if(Flag_Send_and_Recive_Serial!=1) {xil_printf("2: During Code of Application Glb_Var_During_Test.New_SSBL= %d \r\n",New_SSBL); Delay_Xil_Printf;}

        EEPROM1_Flash0_Read(0, 236, Adade_Khas_25_42_211_18, MODE_8_BIT, 4, 0);
        if(Adade_Khas_25_42_211_18[0]==25 && Adade_Khas_25_42_211_18[1]==42 && Adade_Khas_25_42_211_18[2]==211 && Adade_Khas_25_42_211_18[3]==18)
            MMC_Flash_FlashOk1_FlashNotOk0=1;
        if(Flag_Send_and_Recive_Serial!=1) {xil_printf("MMC_Flash_FlashOk1_FlashNotOk0=%d \r\n",MMC_Flash_FlashOk1_FlashNotOk0); Delay_Xil_Printf;}

        EEPROMReadConfig();

        MMC_Flash_CompareOk1_CompareNotOk0=1;
        for(int mmm=0; mmm<sizeof(ReadMyCfg); mmm++){
            if(*(((uint8_t *)&ReadMyCfg_Compare.startData)+mmm)!=*(((uint8_t *)&ReadMyCfg.startData)+mmm)){
                MMC_Flash_CompareOk1_CompareNotOk0=0;
                if(Flag_Send_and_Recive_Serial!=1) {xil_printf("Tafavot Dar Flash MMC Byte:%d    Flash: %d      MMC: %d\r\n", mmm, *(((uint8_t *)&ReadMyCfg.startData)+mmm), *(((uint8_t *)&ReadMyCfg_Compare.startData)+mmm)); Delay_Xil_Printf;}
            }
        }

        if(MMC_Flash_FlashOk1_FlashNotOk0==0)
        {
            if(Flag_Send_and_Recive_Serial!=1) {xil_printf("Man Omadam to if  %d \r\n",Adade_Khas_25_42_211_18[0]); Delay_Xil_Printf;}
            Adade_Khas_25_42_211_18[0]=25;
            Adade_Khas_25_42_211_18[1]=42;
            Adade_Khas_25_42_211_18[2]=211;
            Adade_Khas_25_42_211_18[3]=18;
            Flash_Erase(236);
            EEPROM1_Flash0_Write(0, 236, Adade_Khas_25_42_211_18, MODE_8_BIT, 4);
            ReadMyCfg=ReadMyCfg_Compare;
            EEPROMWriteConfig(WriteMode_All, 1);
        }
        else{
            if(Flag_Send_and_Recive_Serial!=1) {xil_printf("Man Birooooon if  %d \r\n",Adade_Khas_25_42_211_18[0]); Delay_Xil_Printf;}
        }
        usleep(10000);

    }
#endif  //----------------------   E: Flash
#if(1)  //----------------------   S: Set For Bootloader
    u8 getJumptoApp(){
        return (Xil_In32(0xF800702C) >> 24);
    }
    u8 getNeedforUpdate(){
        return (Xil_In32(0xF800702C) >> 20)  & (~(0xFF << 4));
    }
    u8 getDongleFlag(){
        return (Xil_In32(0xF800702C) >> 16)  & (~(0xFFF << 4));
    }
    void clearJumptoApp(){
        Xil_Out32(0xF800702C, Xil_In32(0xF800702C) & (~(0xFF << 24)));  // JumptoApp = 0
        if(Flag_Send_and_Recive_Serial!=1) {xil_printf("@@@@@@@@@ App: JumpToApp clear to %x\n",(Xil_In32(0xF800702C) >> 24)); Delay_Xil_Printf;}
    }
    void setJumptoApp(){
        clearJumptoApp();
        Xil_Out32(0xF800702C,Xil_In32(0xF800702C) | (0x4A << 24));   // JumptoApp = 'J'
        if(Flag_Send_and_Recive_Serial!=1) {xil_printf("@@@@@@@@@ SSBL: JumpToApp set to %x\n",(Xil_In32(0xF800702C) >> 24)); Delay_Xil_Printf;}
    }
    void incrementJumptoApp(){
        JumpToApplication = (Xil_In32(0xF800702C) >> 24);
        JumpToApplication = JumpToApplication + 1;
        clearJumptoApp();
        Xil_Out32(0xF800702C,(Xil_In32(0xF800702C) | (JumpToApplication) << 24));   // JumptoApp++
        if(Flag_Send_and_Recive_Serial!=1) {xil_printf("@@@@@@@@@ SSBL: JumpToApp is incremented to %x\n",(Xil_In32(0xF800702C) >> 24)); Delay_Xil_Printf;}
    }
    void clearNeedforUpdate(){
        Xil_Out32(0xF800702C,Xil_In32(0xF800702C) & (~(0x00F << 20)));    // NeedforUpdate = 0
        if(Flag_Send_and_Recive_Serial!=1) {xil_printf("@@@@@@@@@ SSBL: NeedForUpdate clear to %x\n",(Xil_In32(0xF800702C) >> 20)  & (~(0xFF << 4))); Delay_Xil_Printf;}
    }
    void setNeedforUpdate(){
        clearNeedforUpdate();
        Xil_Out32(0xF800702C,Xil_In32(0xF800702C) | (0x00A << 20));    // NeedforUpdate = 0xA
        if(Flag_Send_and_Recive_Serial!=1) {xil_printf("@@@@@@@@@ SSBL: NeedForUpdate set to %x\n",(Xil_In32(0xF800702C) >> 20)  & (~(0xFF << 4))); Delay_Xil_Printf;}
    }
    void clearDongleFlag(){
        Xil_Out32(0xF800702C,Xil_In32(0xF800702C) & (~(0x000F << 16)));    // NeedforUpdate = 0
        if(Flag_Send_and_Recive_Serial!=1) {xil_printf("@@@@@@@@@ SSBL: DongleFlag clear to %x\n",(Xil_In32(0xF800702C) >> 16)  & (~(0xFFF << 4))); Delay_Xil_Printf;}
    }
    void setDongleFlag(){
        clearDongleFlag();
        Xil_Out32(0xF800702C,Xil_In32(0xF800702C) | (0x0005 << 16));   // JumptoApp = 5
        if(Flag_Send_and_Recive_Serial!=1) {xil_printf("@@@@@@@@@ SSBL: DongleFlag set to %x\n",(Xil_In32(0xF800702C) >> 16)  & (~(0xFFF << 4))); Delay_Xil_Printf;}
    }
#endif  //----------------------   E: Set For Bootloader
